From 53dcfa7c4e6220762f7a60e7116ed0818850a89e Mon Sep 17 00:00:00 2001
From: 2239559319 <w2239559319@outlook.com>
Date: Sat, 1 Mar 2025 13:26:30 +0800
Subject: [PATCH] init

---
 mybuild/build.js                | 172 ++++++++++++++++++++++++++++++++
 mybuild/esm/react-dom-client.js |   3 +
 mybuild/esm/react-dom.js        |   3 +
 mybuild/esm/react.js            |   4 +
 mybuild/forks.js                |  35 +++++++
 mybuild/umd/react-dom.js        |   3 +
 mybuild/use-forks-plugin.js     |  77 ++++++++++++++
 package.json                    |   1 +
 yarn.lock                       |  20 ++++
 9 files changed, 318 insertions(+)
 create mode 100644 mybuild/build.js
 create mode 100644 mybuild/esm/react-dom-client.js
 create mode 100644 mybuild/esm/react-dom.js
 create mode 100644 mybuild/esm/react.js
 create mode 100644 mybuild/forks.js
 create mode 100644 mybuild/umd/react-dom.js
 create mode 100644 mybuild/use-forks-plugin.js

diff --git a/mybuild/build.js b/mybuild/build.js
new file mode 100644
index 0000000000..25c365214b
--- /dev/null
+++ b/mybuild/build.js
@@ -0,0 +1,172 @@
+/* eslint-disable strict */
+const rollup = require('rollup');
+const babel = require('@rollup/plugin-babel').babel;
+const resolve = require('@rollup/plugin-node-resolve').nodeResolve;
+const replace = require('@rollup/plugin-replace');
+const useForks = require('./use-forks-plugin');
+const path = require('path');
+const {_forks} = require('./forks');
+
+let getRollupInteropValue = id => {
+  // We're setting Rollup to assume that imports are ES modules unless otherwise specified.
+  // However, we also compile ES import syntax to `require()` using Babel.
+  // This causes Rollup to turn uses of `import SomeDefaultImport from 'some-module' into
+  // references to `SomeDefaultImport.default` due to CJS/ESM interop.
+  // Some CJS modules don't have a `.default` export, and the rewritten import is incorrect.
+  // Specifying `interop: 'default'` instead will have Rollup use the imported variable as-is,
+  // without adding a `.default` to the reference.
+  const modulesWithCommonJsExports = [
+    'art/core/transform',
+    'art/modes/current',
+    'art/modes/fast-noSideEffects',
+    'art/modes/svg',
+    'JSResourceReferenceImpl',
+    'error-stack-parser',
+    'neo-async',
+    'webpack/lib/dependencies/ModuleDependency',
+    'webpack/lib/dependencies/NullDependency',
+    'webpack/lib/Template',
+  ];
+
+  if (modulesWithCommonJsExports.includes(id)) {
+    return 'default';
+  }
+
+  // For all other modules, handle imports without any import helper utils
+  return 'esModule';
+};
+
+const pureExternalModules = [
+  'fs',
+  'fs/promises',
+  'path',
+  'stream',
+  'prop-types/checkPropTypes',
+  'react-native/Libraries/ReactPrivate/ReactNativePrivateInterface',
+  'scheduler',
+  'react',
+  'react-dom/server',
+  'react/jsx-dev-runtime',
+  'react-dom',
+  'url',
+  'ReactNativeInternalFeatureFlags',
+  'webpack-sources/lib/helpers/createMappingsSerializer.js',
+  'webpack-sources/lib/helpers/readMappings.js',
+];
+
+async function build({entry, output, name, format}) {
+  const forks = _forks[name];
+
+  /**
+   * @type {import('rollup').rollupConfig}
+   */
+  const rollupConfig = {
+    shimMissingExports: true,
+    input: entry,
+    treeshake: {
+      moduleSideEffects: (id, external) =>
+        !(external && pureExternalModules.includes(id)),
+      propertyReadSideEffects: false,
+    },
+    external(id) {
+      if (id === 'react') {
+        return true;
+      }
+
+      if (name === 'ReactDOMClient' && id === 'react-dom') {
+        return true;
+      }
+
+      return false;
+    },
+    plugins: [
+      useForks(forks),
+      resolve(),
+      babel({
+        babelrc: false,
+        configFile: false,
+        presets: [
+          [
+            '@babel/flow',
+            {
+              allowDeclareFields: true,
+            },
+          ],
+        ],
+        plugins: ['babel-plugin-syntax-hermes-parser'],
+        babelHelpers: 'bundled',
+      }),
+      replace({
+        preventAssignment: true,
+        values: {
+          __DEV__: false ? 'false' : 'true',
+          __PROFILE__: false ? 'true' : 'false',
+          'process.env.NODE_ENV': "'production'",
+          __EXPERIMENTAL__: 'false',
+        },
+      }),
+    ],
+    output: {
+      externalLiveBindings: false,
+      freeze: false,
+      interop: getRollupInteropValue,
+      esModule: false,
+    },
+  };
+
+  const rollupOutputOptions = {
+    file: output,
+    format,
+    globals: {
+      react: 'React',
+    },
+    freeze: false,
+    interop: getRollupInteropValue,
+    name,
+    sourcemap: true,
+    esModule: format === 'esm',
+    exports: 'auto',
+    generatedCode: 'es2015'
+  };
+
+  const result = await rollup.rollup(rollupConfig);
+  await result.write(rollupOutputOptions);
+
+  // eslint-disable-next-line react-internal/no-production-logging
+  console.log('打包成功');
+}
+
+build({
+  entry: path.join(__dirname, '../packages/react/index.js'),
+  output: path.join(__dirname, '../dist/react.production.js'),
+  name: 'React',
+  format: 'umd',
+});
+
+build({
+  entry: path.join(__dirname, './umd/react-dom.js'),
+  output: path.join(__dirname, '../dist/react-dom.production.js'),
+  name: 'ReactDOM',
+  format: 'umd'
+});
+
+build({
+  entry: path.join(__dirname, './esm/react.js'),
+  output: path.join(__dirname, '../dist/react.esm.js'),
+  name: 'React',
+  format: 'esm',
+});
+
+build({
+  entry: path.join(__dirname, './esm/react-dom.js'),
+  output: path.join(__dirname, '../dist/react-dom.esm.js'),
+  name: 'ReactDOM',
+  format: 'esm',
+});
+
+build({
+  entry: path.join(__dirname, './esm/react-dom-client.js'),
+  output: path.join(__dirname, '../dist/react-dom-client.esm.js'),
+  name: 'ReactDOMClient',
+  format: 'esm',
+});
diff --git a/mybuild/esm/react-dom-client.js b/mybuild/esm/react-dom-client.js
new file mode 100644
index 0000000000..a5a481879b
--- /dev/null
+++ b/mybuild/esm/react-dom-client.js
@@ -0,0 +1,3 @@
+export * from '../../packages/react-dom/client';
+import * as ReactDOMClient from '../../packages/react-dom/client';
+export default ReactDOMClient;
diff --git a/mybuild/esm/react-dom.js b/mybuild/esm/react-dom.js
new file mode 100644
index 0000000000..d435ed175b
--- /dev/null
+++ b/mybuild/esm/react-dom.js
@@ -0,0 +1,3 @@
+export * from '../../packages/react-dom/index';
+import * as ReactDOM from '../../packages/react-dom/index';
+export default ReactDOM;
diff --git a/mybuild/esm/react.js b/mybuild/esm/react.js
new file mode 100644
index 0000000000..b60dc82cef
--- /dev/null
+++ b/mybuild/esm/react.js
@@ -0,0 +1,4 @@
+import * as React from '../../packages/react/index';
+
+export default React;
+export * from '../../packages/react/index';
diff --git a/mybuild/forks.js b/mybuild/forks.js
new file mode 100644
index 0000000000..42fac66a42
--- /dev/null
+++ b/mybuild/forks.js
@@ -0,0 +1,35 @@
+const _forks = {
+  React: {
+    "./packages/shared/ReactSharedInternals.js": "./packages/react/src/ReactSharedInternalsClient.js",
+    "./packages/shared/ReactDOMSharedInternals.js": new Error('fork error'),
+    "./packages/scheduler/src/SchedulerFeatureFlags.js": "./packages/scheduler/src/SchedulerFeatureFlags.js",
+    "./packages/use-sync-external-store/src/useSyncExternalStore.js": "./packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js",
+    "./packages/use-sync-external-store/src/isServerEnvironment.js": undefined,
+  },
+  ReactDOM: {
+    "./packages/shared/ReactDOMSharedInternals.js": "./packages/react-dom/src/ReactDOMSharedInternals.js",
+    "./packages/scheduler/src/SchedulerFeatureFlags.js": "./packages/scheduler/src/SchedulerFeatureFlags.js",
+    "./packages/react-reconciler/src/ReactFiberConfig.js": "./packages/react-reconciler/src/forks/ReactFiberConfig.dom.js",
+    "./packages/react-server/src/ReactServerStreamConfig.js": "./packages/react-server/src/forks/ReactServerStreamConfig.dom-browser.js",
+    "./packages/react-server/src/ReactFizzConfig.js": "./packages/react-server/src/forks/ReactFizzConfig.dom.js",
+    "./packages/react-server/src/ReactFlightServerConfig.js": "./packages/react-server/src/forks/ReactFlightServerConfig.dom-browser.js",
+    "./packages/react-client/src/ReactFlightClientConfig.js": "./packages/react-client/src/forks/ReactFlightClientConfig.dom-browser.js",
+    "./packages/use-sync-external-store/src/useSyncExternalStore.js": "./packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js",
+    "./packages/use-sync-external-store/src/isServerEnvironment.js": undefined,
+  },
+  ReactDOMClient: {
+    "./packages/scheduler/src/SchedulerFeatureFlags.js": "./packages/scheduler/src/SchedulerFeatureFlags.js",
+    "./packages/react-reconciler/src/ReactFiberConfig.js": "./packages/react-reconciler/src/forks/ReactFiberConfig.dom.js",
+    "./packages/react-server/src/ReactServerStreamConfig.js": "./packages/react-server/src/forks/ReactServerStreamConfig.dom-browser.js",
+    "./packages/react-server/src/ReactFizzConfig.js": "./packages/react-server/src/forks/ReactFizzConfig.dom.js",
+    "./packages/react-server/src/ReactFlightServerConfig.js": "./packages/react-server/src/forks/ReactFlightServerConfig.dom-browser.js",
+    "./packages/react-client/src/ReactFlightClientConfig.js": "./packages/react-client/src/forks/ReactFlightClientConfig.dom-browser.js",
+    "./packages/use-sync-external-store/src/useSyncExternalStore.js": "./packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js",
+    "./packages/use-sync-external-store/src/isServerEnvironment.js": undefined,
+  }
+};
+
+
+module.exports = {
+  _forks,
+}
diff --git a/mybuild/umd/react-dom.js b/mybuild/umd/react-dom.js
new file mode 100644
index 0000000000..17a0bddf12
--- /dev/null
+++ b/mybuild/umd/react-dom.js
@@ -0,0 +1,3 @@
+export * from '../../packages/react-dom/index';
+export {createRoot, hydrateRoot} from '../../packages/react-dom/src/client/ReactDOMClient';
+
diff --git a/mybuild/use-forks-plugin.js b/mybuild/use-forks-plugin.js
new file mode 100644
index 0000000000..6c68f4ac8f
--- /dev/null
+++ b/mybuild/use-forks-plugin.js
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+'use strict';
+
+const path = require('path');
+
+function resolveRelatively(importee, importer) {
+  
+  return require.resolve(importee, {
+    paths: [path.dirname(importer)],
+  });
+}
+
+let resolveCache = new Map();
+function useForks(forks) {
+  let resolvedForks = new Map();
+  Object.keys(forks).forEach(srcModule => {
+    // Fork paths are relative to the project root. They must include the full
+    // path, including the extension. We intentionally don't use Node's module
+    // resolution algorithm because 1) require.resolve doesn't work with ESM
+    // modules, and 2) the behavior is easier to predict.
+    const targetModule = forks[srcModule];
+    resolvedForks.set(
+      path.resolve(process.cwd(), srcModule),
+      // targetModule could be a string (a file path),
+      // or an error (which we'd throw if it gets used).
+      // Don't try to "resolve" errors, but cache
+      // resolved file paths.
+      typeof targetModule === 'string'
+        ? path.resolve(process.cwd(), targetModule)
+        : targetModule
+    );
+  });
+  return {
+    name: 'scripts/rollup/plugins/use-forks-plugin',
+    resolveId(importee, importer) {
+      if (!importer || !importee) {
+        return null;
+      }
+      if (importee.startsWith('\u0000')) {
+        // Internal Rollup reference, ignore.
+        // Passing that to Node file functions can fatal.
+        return null;
+      }
+      let resolvedImportee = null;
+      let cacheKey = `${importer}:::${importee}`;
+      if (resolveCache.has(cacheKey)) {
+        // Avoid hitting file system if possible.
+        resolvedImportee = resolveCache.get(cacheKey);
+      } else {
+        try {
+          resolvedImportee = resolveRelatively(importee, importer);
+        } catch (err) {
+          // Not our fault, let Rollup fail later.
+        }
+        if (resolvedImportee) {
+          resolveCache.set(cacheKey, resolvedImportee);
+        }
+      }
+      if (resolvedImportee && resolvedForks.has(resolvedImportee)) {
+        // We found a fork!
+        const fork = resolvedForks.get(resolvedImportee);
+        if (fork instanceof Error) {
+          throw fork;
+        }
+        return fork;
+      }
+      return null;
+    },
+  };
+}
+
+module.exports = useForks;
diff --git a/package.json b/package.json
index cffd0ba28b..e2e7a26dfe 100644
--- a/package.json
+++ b/package.json
@@ -42,6 +42,7 @@
     "@rollup/plugin-replace": "^5.0.2",
     "abortcontroller-polyfill": "^1.7.5",
     "art": "0.10.1",
+    "babel-plugin-syntax-hermes-parser": "^0.26.0",
     "babel-plugin-syntax-trailing-function-commas": "^6.5.0",
     "chalk": "^3.0.0",
     "cli-table": "^0.3.1",
diff --git a/yarn.lock b/yarn.lock
index d52bc62f78..b4684d8715 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -4737,6 +4737,13 @@ babel-plugin-minify-type-constructors@^0.4.3:
   dependencies:
     babel-helper-is-void-0 "^0.4.3"
 
+babel-plugin-syntax-hermes-parser@^0.26.0:
+  version "0.26.0"
+  resolved "https://registry.yarnpkg.com/babel-plugin-syntax-hermes-parser/-/babel-plugin-syntax-hermes-parser-0.26.0.tgz#eecd9455fbb003dcc1abd28c5ca0b343efd4abac"
+  integrity sha512-gU/U5ASnPmm1GY9vptiJF20BNsULFuetjJX6gvNdJCUsftbFQ1STGYMOfkFgVTtpZo+iGTz4tzDNA/IW0U8dvA==
+  dependencies:
+    hermes-parser "0.26.0"
+
 babel-plugin-syntax-trailing-function-commas@^6.5.0:
   version "6.22.0"
   resolved "https://registry.yarnpkg.com/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz#ba0360937f8d06e40180a43fe0d5616fff532cf3"
@@ -7351,6 +7358,7 @@ eslint-plugin-no-unsanitized@4.0.2:
 
 "eslint-plugin-react-internal@link:./scripts/eslint-rules":
   version "0.0.0"
+  uid ""
 
 eslint-plugin-react@^6.7.1:
   version "6.10.3"
@@ -9273,6 +9281,11 @@ hermes-estree@0.23.1:
   resolved "https://registry.yarnpkg.com/hermes-estree/-/hermes-estree-0.23.1.tgz#d0bac369a030188120ee7024926aabe5a9f84fdb"
   integrity sha512-eT5MU3f5aVhTqsfIReZ6n41X5sYn4IdQL0nvz6yO+MMlPxw49aSARHLg/MSehQftyjnrE8X6bYregzSumqc6cg==
 
+hermes-estree@0.26.0:
+  version "0.26.0"
+  resolved "https://registry.yarnpkg.com/hermes-estree/-/hermes-estree-0.26.0.tgz#70da6d2e7131ec2693dac8e596e76957c4ce76ef"
+  integrity sha512-If1T7lhfXnGlVLbnsmwerNB5cyJm2oIE8TN1UKEq6/OUX1nOGUhjXMpqAwZ1wkkn9Brda0VRyJEWOGT2GgVcAQ==
+
 hermes-parser@0.22.0, hermes-parser@^0.22.0:
   version "0.22.0"
   resolved "https://registry.yarnpkg.com/hermes-parser/-/hermes-parser-0.22.0.tgz#fc8e0e6c7bfa8db85b04c9f9544a102c4fcb4040"
@@ -9294,6 +9307,13 @@ hermes-parser@0.23.1:
   dependencies:
     hermes-estree "0.23.1"
 
+hermes-parser@0.26.0:
+  version "0.26.0"
+  resolved "https://registry.yarnpkg.com/hermes-parser/-/hermes-parser-0.26.0.tgz#4968f8ad923a8064a65d0c1e037d754fd3a45c66"
+  integrity sha512-fWT40jJ/BtlzuyiiQS7lzNIlB5h6flVZoN8Jn8v5l987HL5dK9s+/4+py0FaBmeIEROC2zxt5qMLwXFTPLQ7BA==
+  dependencies:
+    hermes-estree "0.26.0"
+
 homedir-polyfill@^1.0.0, homedir-polyfill@^1.0.1:
   version "1.0.3"
   resolved "https://registry.yarnpkg.com/homedir-polyfill/-/homedir-polyfill-1.0.3.tgz#743298cef4e5af3e194161fbadcc2151d3a058e8"
-- 
2.39.5

